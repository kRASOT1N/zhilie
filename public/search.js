// search.js

let allAds = []; // –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
let filteredAds = [];
let currentPage = 1;
const adsPerPage = 10;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±—Ö—É–∫—É
// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ

document.addEventListener('DOMContentLoaded', function() {
    loadAds();
    setupEventListeners();
});

function setupEventListeners() {
    const filterElements = [
        'categoryFilter', 'actionFilter', 'priceFrom', 'priceTo', 
        'areaFrom', 'areaTo', 'roomsFilter', 'cityFilter', 
        'statusFilter', 'premiumFilter'
    ];
    filterElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('change', applyFilters);
            element.addEventListener('input', applyFilters);
        }
    });
    document.getElementById('sortSelect').addEventListener('change', applyFilters);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function loadAds() {
    showLoading();
    try {
        const response = await fetch('https://hook.us2.make.com/398i0cvsue9lg9kutqtc1phjlmbtnvfh', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                sort: 'newest',
                page: 1,
                limit: 10
            }) // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã sort, page, limit
        });
        if (response.ok) {
            const data = await response.json();
            console.log('–û—Ç–≤–µ—Ç –æ—Ç –≤–µ–±—Ö—É–∫–∞:', data);
            allAds = Array.isArray(data) ? data : [];
            applyFilters();
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –∑–∞–ø
function applyFilters() {
    filteredAds = allAds.filter(ad => {
        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if (getFilterValue('categoryFilter') && ad.category !== getFilterValue('categoryFilter')) {
            return false;
        }
        // –î–µ–π—Å—Ç–≤–∏–µ
        if (getFilterValue('actionFilter') && ad.action !== getFilterValue('actionFilter')) {
            return false;
        }
        // –¶–µ–Ω–∞
        const price = parseInt(ad.price) || 0;
        const priceFrom = parseInt(getFilterValue('priceFrom')) || 0;
        const priceTo = parseInt(getFilterValue('priceTo')) || Infinity;
        if (price < priceFrom || price > priceTo) {
            return false;
        }
        // –ü–ª–æ—â–∞–¥—å
        const area = parseInt(ad.area) || 0;
        const areaFrom = parseInt(getFilterValue('areaFrom')) || 0;
        const areaTo = parseInt(getFilterValue('areaTo')) || Infinity;
        if (area < areaFrom || area > areaTo) {
            return false;
        }
        // –ö–æ–º–Ω–∞—Ç—ã
        if (getFilterValue('roomsFilter')) {
            const rooms = parseInt(ad.rooms) || 0;
            const filterRooms = parseInt(getFilterValue('roomsFilter'));
            if (filterRooms === 4 && rooms < 4) return false;
            if (filterRooms !== 4 && rooms !== filterRooms) return false;
        }
        // –ì–æ—Ä–æ–¥
        if (getFilterValue('cityFilter') && !ad.city?.toLowerCase().includes(getFilterValue('cityFilter').toLowerCase())) {
            return false;
        }
        // –°—Ç–∞—Ç—É—Å
        if (getFilterValue('statusFilter') && ad.status !== getFilterValue('statusFilter')) {
            return false;
        }
        // –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        const premiumFilter = getFilterValue('premiumFilter');
        if (premiumFilter) {
            if (premiumFilter === 'premium' && !ad.is_premium) return false;
            if (premiumFilter === 'top' && !ad.is_top) return false;
            if (premiumFilter === 'vip' && !ad.is_vip) return false;
        }
        return true;
    });
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const sortBy = getFilterValue('sortSelect');
    filteredAds.sort((a, b) => {
        switch (sortBy) {
            case 'newest':
                return new Date(b.created_at) - new Date(a.created_at);
            case 'oldest':
                return new Date(a.created_at) - new Date(b.created_at);
            case 'price_asc':
                return (parseInt(a.price) || 0) - (parseInt(b.price) || 0);
            case 'price_desc':
                return (parseInt(b.price) || 0) - (parseInt(a.price) || 0);
            case 'area_asc':
                return (parseInt(a.area) || 0) - (parseInt(b.area) || 0);
            case 'area_desc':
                return (parseInt(b.area) || 0) - (parseInt(a.area) || 0);
            default:
                return 0;
        }
    });
    currentPage = 1;
    renderAds();
}

function getFilterValue(id) {
    const element = document.getElementById(id);
    return element ? element.value : '';
}

function clearFilters() {
    const filterElements = [
        'categoryFilter', 'actionFilter', 'priceFrom', 'priceTo', 
        'areaFrom', 'areaTo', 'roomsFilter', 'cityFilter', 
        'statusFilter', 'premiumFilter'
    ];
    filterElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) element.value = '';
    });
    document.getElementById('sortSelect').value = 'newest';
    applyFilters();
}

// --- –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ---
function getFavorites() {
    try {
        return JSON.parse(localStorage.getItem('favorites') || '[]');
    } catch { return []; }
}
function setFavorites(favs) {
    localStorage.setItem('favorites', JSON.stringify(favs));
}
function toggleFavorite(adId) {
    let favs = getFavorites();
    if (favs.includes(adId)) {
        favs = favs.filter(id => id !== adId);
    } else {
        favs.push(adId);
    }
    setFavorites(favs);
    renderAds();
}
function isFavorite(adId) {
    return getFavorites().includes(adId);
}
// --- –ò–∑–±—Ä–∞–Ω–Ω–æ–µ ---

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
function renderAds() {
    const adsGrid = document.getElementById('adsGrid');
    const resultsCount = document.getElementById('resultsCount');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    resultsCount.textContent = `–ù–∞–π–¥–µ–Ω–æ ${filteredAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`;
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIndex = (currentPage - 1) * adsPerPage;
    const endIndex = startIndex + adsPerPage;
    const pageAds = filteredAds.slice(startIndex, endIndex);
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
    adsGrid.innerHTML = '';
    
    if (pageAds.length === 0) {
        adsGrid.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px; color: #666;">
                <div style="font-size: 48px; margin-bottom: 16px;">üîç</div>
                <div style="font-size: 18px; margin-bottom: 8px;">–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                <div style="font-size: 14px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</div>
            </div>
        `;
    } else {
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        pageAds.forEach(ad => {
            adsGrid.appendChild(createAdCard(ad));
        });
    }
    
    renderPagination();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function createAdCard(ad) {
    const card = document.createElement('div');
    card.className = 'ad-card';
    card.onclick = () => openAdDetails(ad);

    // –°–µ—Ä–¥–µ—á–∫–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    const favBtn = document.createElement('button');
    favBtn.className = 'fav-btn';
    favBtn.innerHTML = isFavorite(ad.id) ? '‚ù§Ô∏è' : 'ü§ç';
    favBtn.title = isFavorite(ad.id) ? '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    favBtn.onclick = (e) => {
        e.stopPropagation();
        toggleFavorite(ad.id);
    };

    // –§–æ—Ç–æ –∏–ª–∏ —ç–º–æ–¥–∑–∏
    let imageBlock = '';
    if (ad.photos && Array.isArray(ad.photos) && ad.photos.length > 0) {
        imageBlock = `<img src="${ad.photos[0]}" alt="${ad.title}">`;
    } else {
        imageBlock = `
            <div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;background:linear-gradient(135deg,#e8f5e8 0%,#f0f8f0 100%);font-size:64px;color:#b2b2b2;">üè†</div>
        `;
    }

    // –ü—Ä–µ–º–∏—É–º –±–µ–π–¥–∂
    let premiumBadge = '';
    if (ad.is_vip) {
        premiumBadge = '<div class="ad-premium-badge">VIP</div>';
    } else if (ad.is_top) {
        premiumBadge = '<div class="ad-premium-badge">–¢–û–ü</div>';
    } else if (ad.is_premium) {
        premiumBadge = '<div class="ad-premium-badge">–ü–†–ï–ú–ò–£–ú</div>';
    }

    // –î–∞—Ç–∞
    const date = ad.created_at ? new Date(ad.created_at).toLocaleDateString('ru-RU') : '';

    // –î–µ—Ç–∞–ª–∏
    let details = '';
    if (ad.rooms) {
        details += `<div class="ad-detail">
            <div class="ad-detail-label">–ö–æ–º–Ω–∞—Ç</div>
            <div class="ad-detail-value">${ad.rooms}</div>
        </div>`;
    }
    if (ad.area) {
        details += `<div class="ad-detail">
            <div class="ad-detail-label">–ü–ª–æ—â–∞–¥—å</div>
            <div class="ad-detail-value">${ad.area} –º¬≤</div>
        </div>`;
    }
    if (ad.beds) {
        details += `<div class="ad-detail">
            <div class="ad-detail-label">–ú–µ—Å—Ç</div>
            <div class="ad-detail-value">${ad.beds}</div>
        </div>`;
    }

    // –¶–µ–Ω–∞
    const price = parseInt(ad.price) || 0;
    const formattedPrice = price.toLocaleString('ru-RU') + ' ‚Ç∏';

    card.innerHTML = `
        <div class="ad-image" style="min-height:200px;max-height:200px;position:relative;">
            ${imageBlock}
            ${premiumBadge}
            <div class="fav-btn-container" style="position:absolute;top:10px;right:10px;z-index:2;"> </div>
        </div>
        <div class="ad-content">
            <div class="ad-title" title="${ad.title || ''}">${ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
            <div class="ad-details">${details}</div>
            <div class="ad-price">${formattedPrice}</div>
            <div class="ad-location">
                ${ad.city ? ad.city : ''} ${ad.district ? `‚Ä¢ ${ad.district}` : ''}
            </div>
            <div class="ad-footer">
                <div class="ad-owner">${ad.user_fullname || '–ê–Ω–æ–Ω–∏–º'}</div>
                <div class="ad-stats">
                    <div class="ad-stat">üëÅ ${ad.views_count || 0}</div>
                    <div class="ad-stat">‚òÖ ${ad.favorites_count || 0}</div>
                    <div class="ad-stat">üìÖ ${date}</div>
                </div>
            </div>
        </div>
    `;
    card.querySelector('.fav-btn-container').appendChild(favBtn);
    return card;
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function renderPagination() {
    const pagination = document.getElementById('pagination');
    const totalPages = Math.ceil(filteredAds.length / adsPerPage);
    
    if (totalPages <= 1) {
        pagination.innerHTML = '';
        return;
    }
    
    let paginationHTML = '';
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    paginationHTML += `
        <button class="pagination-btn" ${currentPage === 1 ? 'disabled' : ''} 
                onclick="changePage(${currentPage - 1})">
            ‚Üê
        </button>
    `;
    
    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);
    
    for (let i = startPage; i <= endPage; i++) {
        paginationHTML += `
            <button class="pagination-btn ${i === currentPage ? 'active' : ''}" 
                    onclick="changePage(${i})">
                ${i}
            </button>
        `;
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    paginationHTML += `
        <button class="pagination-btn" ${currentPage === totalPages ? 'disabled' : ''} 
                onclick="changePage(${currentPage + 1})">
            ‚Üí
        </button>
    `;
    
    pagination.innerHTML = paginationHTML;
}

// –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function changePage(page) {
    const totalPages = Math.ceil(filteredAds.length / adsPerPage);
    if (page >= 1 && page <= totalPages) {
        currentPage = page;
        renderAds();
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
}

// --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è ---
function showAdModal(ad) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–∞–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldModal = document.getElementById('adModal');
    if (oldModal) oldModal.remove();

    // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const categoryMap = {
        'housing': '–ñ–∏–ª—å—ë',
        'bed': '–ö–æ–π–∫–æ-–º–µ—Å—Ç–∞',
        'realestate': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        'food': '–û–±—â–µ–ø–∏—Ç',
        'service': '–¢–æ—Ä–≥–æ–≤–ª—è –∏ —É—Å–ª—É–≥–∏',
        'place': '–ú–µ—Å—Ç–æ',
        'auto': '–ê–≤—Ç–æ',
        'other': '–†–∞–∑–Ω–æ–µ',
        'land': '–£—á–∞—Å—Ç–∫–∏',
        'leisure': '–û—Ç–¥—ã—Ö ‚Äî –ª–µ—á–µ–Ω–∏–µ'
    };
    const actionMap = {
        'rent': '–°–Ω—è—Ç—å',
        'rent-out': '–°–¥–∞—Ç—å',
        'buy': '–ö—É–ø–∏—Ç—å',
        'sell': '–ü—Ä–æ–¥–∞—Ç—å'
    };

    // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª–∫—É
    const modal = document.createElement('div');
    modal.id = 'adModal';
    modal.style.position = 'fixed';
    modal.style.top = '0';
    modal.style.left = '0';
    modal.style.width = '100vw';
    modal.style.height = '100vh';
    modal.style.background = 'rgba(0,0,0,0.45)';
    modal.style.zIndex = '9999';
    modal.style.display = 'flex';
    modal.style.alignItems = 'center';
    modal.style.justifyContent = 'center';
    modal.style.overflowY = 'auto';

    // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª–∫–∏
    const content = document.createElement('div');
    content.style.background = '#fff';
    content.style.borderRadius = '18px';
    content.style.maxWidth = '600px';
    content.style.width = '100%';
    content.style.padding = '32px 28px 24px 28px';
    content.style.position = 'relative';
    content.style.boxShadow = '0 8px 32px rgba(76,175,80,0.13)';
    content.style.margin = '40px 0';

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '√ó';
    closeBtn.style.position = 'absolute';
    closeBtn.style.top = '18px';
    closeBtn.style.right = '18px';
    closeBtn.style.fontSize = '28px';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    closeBtn.style.cursor = 'pointer';
    closeBtn.onclick = () => modal.remove();
    content.appendChild(closeBtn);

    // –§–æ—Ç–æ (–±–∞–Ω–Ω–µ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏)
    if (ad.photos && ad.photos.length > 0) {
        const banner = document.createElement('div');
        banner.style.width = '100%';
        banner.style.height = '220px';
        banner.style.overflow = 'hidden';
        banner.style.borderRadius = '18px 18px 0 0';
        banner.style.margin = '0 0 18px 0';
        banner.style.display = 'flex';
        banner.style.alignItems = 'center';
        banner.style.justifyContent = 'center';
        const img = document.createElement('img');
        img.src = ad.photos[0];
        img.alt = ad.title || '';
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        img.style.borderRadius = '18px 18px 0 0';
        banner.appendChild(img);
        content.appendChild(banner);
    } else {
        // –≠–º–æ–¥–∑–∏-–¥–æ–º–∏–∫ –∫–∞–∫ –±–∞–Ω–Ω–µ—Ä
        const banner = document.createElement('div');
        banner.style.width = '100%';
        banner.style.height = '220px';
        banner.style.display = 'flex';
        banner.style.alignItems = 'center';
        banner.style.justifyContent = 'center';
        banner.style.background = 'linear-gradient(135deg,#e8f5e8 0%,#f0f8f0 100%)';
        banner.style.borderRadius = '18px 18px 0 0';
        banner.style.margin = '0 0 18px 0';
        const emoji = document.createElement('div');
        emoji.style.fontSize = '120px';
        emoji.style.color = '#b2b2b2';
        emoji.textContent = 'üè†';
        banner.appendChild(emoji);
        content.appendChild(banner);
    }

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('h2');
    title.textContent = ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    title.style.fontSize = '24px';
    title.style.fontWeight = '700';
    title.style.marginBottom = '8px';
    content.appendChild(title);

    // –¶–µ–Ω–∞
    if (ad.price) {
        const price = document.createElement('div');
        price.textContent = `${parseInt(ad.price).toLocaleString('ru-RU')} ‚Ç∏`;
        price.style.fontSize = '20px';
        price.style.color = '#388e3c';
        price.style.fontWeight = '700';
        price.style.marginBottom = '10px';
        content.appendChild(price);
    }

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–µ–π—Å—Ç–≤–∏–µ, –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω
    const meta = document.createElement('div');
    meta.style.fontSize = '15px';
    meta.style.color = '#256029';
    meta.style.marginBottom = '10px';
    meta.innerHTML =
        (ad.category ? `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${categoryMap[ad.category] || ad.category}<br>` : '') +
        (ad.action ? `<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ${actionMap[ad.action] || ad.action}<br>` : '') +
        (ad.city ? `<b>–ì–æ—Ä–æ–¥:</b> ${ad.city}<br>` : '') +
        (ad.district ? `<b>–†–∞–π–æ–Ω:</b> ${ad.district}<br>` : '');
    content.appendChild(meta);

    // –ü–ª–æ—â–∞–¥—å, –∫–æ–º–Ω–∞—Ç—ã, –∫—Ä–æ–≤–∞—Ç–∏, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    const details = document.createElement('div');
    details.style.fontSize = '15px';
    details.style.color = '#444';
    details.style.marginBottom = '10px';
    details.innerHTML =
        (ad.area ? `<b>–ü–ª–æ—â–∞–¥—å:</b> ${ad.area} –º¬≤<br>` : '') +
        (ad.rooms ? `<b>–ö–æ–º–Ω–∞—Ç:</b> ${ad.rooms}<br>` : '') +
        (ad.beds ? `<b>–ú–µ—Å—Ç:</b> ${ad.beds}<br>` : '') +
        (ad.capacity ? `<b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> ${ad.capacity}<br>` : '');
    if (details.innerHTML.trim()) content.appendChild(details);

    // –û–ø–∏—Å–∞–Ω–∏–µ
    if (ad.description) {
        const desc = document.createElement('div');
        desc.textContent = ad.description;
        desc.style.margin = '14px 0 10px 0';
        desc.style.fontSize = '15px';
        desc.style.color = '#222';
        content.appendChild(desc);
    }

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if (ad.contacts) {
        const contacts = document.createElement('div');
        contacts.innerHTML = `<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> ${ad.contacts}`;
        contacts.style.margin = '10px 0 0 0';
        contacts.style.fontSize = '15px';
        contacts.style.color = '#256029';
        content.appendChild(contacts);
    }

    // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    if (ad.created_at) {
        const date = document.createElement('div');
        const d = new Date(ad.created_at);
        const dateStr = d.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
        date.innerHTML = `<b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ${dateStr}`;
        date.style.fontSize = '13px';
        date.style.color = '#888';
        date.style.marginTop = '10px';
        content.appendChild(date);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = document.createElement('div');
    stats.style.fontSize = '13px';
    stats.style.color = '#888';
    stats.style.marginTop = '10px';
    stats.innerHTML =
        (ad.views_count !== undefined ? `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${ad.views_count} ` : '') +
        (ad.favorites_count !== undefined ? `‚òÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: ${ad.favorites_count}` : '');
    if (stats.innerHTML.trim()) content.appendChild(stats);

    modal.appendChild(content);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
    modal.onclick = (e) => { if (e.target === modal) modal.remove(); };
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function openAdDetails(ad) {
    showAdModal(ad);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    const adsGrid = document.getElementById('adsGrid');
    adsGrid.innerHTML = `
        <div class="loading" style="grid-column: 1 / -1;">
            <div class="loading-spinner"></div>
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...</div>
        </div>
    `;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const adsGrid = document.getElementById('adsGrid');
    adsGrid.innerHTML = `
        <div style="grid-column: 1 / -1; text-align: center; padding: 60px 20px; color: #dc3545;">
            <div style="font-size: 48px; margin-bottom: 16px;">‚ö†Ô∏è</div>
            <div style="font-size: 18px; margin-bottom: 8px;">–û—à–∏–±–∫–∞</div>
            <div style="font-size: 14px;">${message}</div>
        </div>
    `;
} 

// --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---
function renderFavoritesPage() {
    const favIds = getFavorites();
    const searchInput = document.createElement('input');
    searchInput.type = 'text';
    searchInput.placeholder = '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...';
    searchInput.className = 'search-input';
    const favGrid = document.createElement('div');
    favGrid.className = 'adsGrid';
    function renderFavCards() {
        favGrid.innerHTML = '';
        const filtered = allAds.filter(ad => favIds.includes(ad.id) && ad.title.toLowerCase().includes(searchInput.value.toLowerCase()));
        if (filtered.length === 0) {
            favGrid.innerHTML = '<div style="padding:40px;text-align:center;color:#888;">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>';
        } else {
            filtered.forEach(ad => favGrid.appendChild(createAdCard(ad)));
        }
    }
    searchInput.addEventListener('input', renderFavCards);
    renderFavCards();
    const container = document.getElementById('adsGrid') || document.body;
    container.innerHTML = '';
    container.appendChild(searchInput);
    container.appendChild(favGrid);
} 